<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd" >

    <!--开启支持注解扫描-->
    <context:annotation-config/>
    <!--配置扫描的包路径-->
    <context:component-scan base-package="com.cn.transactionManager.service"/>

    <!--配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <constructor-arg name="url" value="jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia/Shanghai"/>
        <constructor-arg name="username" value="root"/>
        <constructor-arg name="password" value="123456"/>
    </bean>

    <!--
    <aop:aspectj-autoproxy />属性proxy-target-class值默认为false，表示使用的是jdk动态代理织入增强，
    proxy-target-class值为true，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，
    如果目标类没有声明接口，则spring将自动使用CGLib动态代理
    -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>
    <!--设置Spring Jdbc的数据源-->
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
    开启事务的方法有两种如下：
    第一种：开启事务的注解支持，然后在方法上配置@Transactional
    第二种：配置事务切面和切点
    -->
    <!--方法一：开启事务控制的注解支持-->
<!--    <tx:annotation-driven transaction-manager="txManager"/>-->

    <!--方法二：配置事务切面和切点-->
    <!--事务切面配置-->
    <tx:advice id="advice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="update" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <!--匹配方法名以add开头的方法-->
            <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="create" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    <!--事务切入点-->
    <!--
    AccountService接口下的所有方法执行：execution(* com.cn.transactionManager.Service.AccountService.*(..))
    com.cn.transactionManager.service包下的所有方法的执行：execution(* com.cn.transactionManager.service.*.*(..))
    com.cn.transactionManager.service包及其子包下的所有方法的执行：
        execution(* com.cn.transactionManager.service..*.*(..))
    -->
    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.cn.transactionManager.service..*.*(..))"/>
        <aop:advisor advice-ref="advice" pointcut-ref="txPoint"/>
    </aop:config>
</beans>